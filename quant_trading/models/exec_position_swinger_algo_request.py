# coding: utf-8

"""
    Quant Trading Network API

    This API will use JSON.         JSON looks like this:                {         \"key\": \"value\",         \"anotherKey\": \"anotherValue\"       }  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@quant-trading.network
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ExecPositionSwingerAlgoRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_long_stake_state': 'PositionState',
        'position_short_stake_state': 'PositionState',
        'current_unrealised_pct': 'CurrentUnrealisedPct',
        'open_position_hours': 'OpenPositionHours',
        'closed_position_hours': 'ClosedPositionHours'
    }

    attribute_map = {
        'position_long_stake_state': 'positionLongStakeState',
        'position_short_stake_state': 'positionShortStakeState',
        'current_unrealised_pct': 'currentUnrealisedPct',
        'open_position_hours': 'openPositionHours',
        'closed_position_hours': 'closedPositionHours'
    }

    def __init__(self, position_long_stake_state=None, position_short_stake_state=None, current_unrealised_pct=None, open_position_hours=None, closed_position_hours=None):  # noqa: E501
        """ExecPositionSwingerAlgoRequest - a model defined in Swagger"""  # noqa: E501
        self._position_long_stake_state = None
        self._position_short_stake_state = None
        self._current_unrealised_pct = None
        self._open_position_hours = None
        self._closed_position_hours = None
        self.discriminator = None
        self.position_long_stake_state = position_long_stake_state
        self.position_short_stake_state = position_short_stake_state
        self.current_unrealised_pct = current_unrealised_pct
        self.open_position_hours = open_position_hours
        self.closed_position_hours = closed_position_hours

    @property
    def position_long_stake_state(self):
        """Gets the position_long_stake_state of this ExecPositionSwingerAlgoRequest.  # noqa: E501


        :return: The position_long_stake_state of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :rtype: PositionState
        """
        return self._position_long_stake_state

    @position_long_stake_state.setter
    def position_long_stake_state(self, position_long_stake_state):
        """Sets the position_long_stake_state of this ExecPositionSwingerAlgoRequest.


        :param position_long_stake_state: The position_long_stake_state of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :type: PositionState
        """
        if position_long_stake_state is None:
            raise ValueError("Invalid value for `position_long_stake_state`, must not be `None`")  # noqa: E501

        self._position_long_stake_state = position_long_stake_state

    @property
    def position_short_stake_state(self):
        """Gets the position_short_stake_state of this ExecPositionSwingerAlgoRequest.  # noqa: E501


        :return: The position_short_stake_state of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :rtype: PositionState
        """
        return self._position_short_stake_state

    @position_short_stake_state.setter
    def position_short_stake_state(self, position_short_stake_state):
        """Sets the position_short_stake_state of this ExecPositionSwingerAlgoRequest.


        :param position_short_stake_state: The position_short_stake_state of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :type: PositionState
        """
        if position_short_stake_state is None:
            raise ValueError("Invalid value for `position_short_stake_state`, must not be `None`")  # noqa: E501

        self._position_short_stake_state = position_short_stake_state

    @property
    def current_unrealised_pct(self):
        """Gets the current_unrealised_pct of this ExecPositionSwingerAlgoRequest.  # noqa: E501


        :return: The current_unrealised_pct of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :rtype: CurrentUnrealisedPct
        """
        return self._current_unrealised_pct

    @current_unrealised_pct.setter
    def current_unrealised_pct(self, current_unrealised_pct):
        """Sets the current_unrealised_pct of this ExecPositionSwingerAlgoRequest.


        :param current_unrealised_pct: The current_unrealised_pct of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :type: CurrentUnrealisedPct
        """
        if current_unrealised_pct is None:
            raise ValueError("Invalid value for `current_unrealised_pct`, must not be `None`")  # noqa: E501

        self._current_unrealised_pct = current_unrealised_pct

    @property
    def open_position_hours(self):
        """Gets the open_position_hours of this ExecPositionSwingerAlgoRequest.  # noqa: E501


        :return: The open_position_hours of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :rtype: OpenPositionHours
        """
        return self._open_position_hours

    @open_position_hours.setter
    def open_position_hours(self, open_position_hours):
        """Sets the open_position_hours of this ExecPositionSwingerAlgoRequest.


        :param open_position_hours: The open_position_hours of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :type: OpenPositionHours
        """
        if open_position_hours is None:
            raise ValueError("Invalid value for `open_position_hours`, must not be `None`")  # noqa: E501

        self._open_position_hours = open_position_hours

    @property
    def closed_position_hours(self):
        """Gets the closed_position_hours of this ExecPositionSwingerAlgoRequest.  # noqa: E501


        :return: The closed_position_hours of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :rtype: ClosedPositionHours
        """
        return self._closed_position_hours

    @closed_position_hours.setter
    def closed_position_hours(self, closed_position_hours):
        """Sets the closed_position_hours of this ExecPositionSwingerAlgoRequest.


        :param closed_position_hours: The closed_position_hours of this ExecPositionSwingerAlgoRequest.  # noqa: E501
        :type: ClosedPositionHours
        """
        if closed_position_hours is None:
            raise ValueError("Invalid value for `closed_position_hours`, must not be `None`")  # noqa: E501

        self._closed_position_hours = closed_position_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecPositionSwingerAlgoRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecPositionSwingerAlgoRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
