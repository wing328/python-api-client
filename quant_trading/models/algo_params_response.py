# coding: utf-8

"""
    Quant Trading Network API

    This API will use JSON.         JSON looks like this:                {         \"key\": \"value\",         \"anotherKey\": \"anotherValue\"       }  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@quant-trading.network
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AlgoParamsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_stake_size_percentage': 'float',
        'decision_polling_interval_in_seconds': 'int'
    }

    attribute_map = {
        'position_stake_size_percentage': 'positionStakeSizePercentage',
        'decision_polling_interval_in_seconds': 'decisionPollingIntervalInSeconds'
    }

    def __init__(self, position_stake_size_percentage=None, decision_polling_interval_in_seconds=None):  # noqa: E501
        """AlgoParamsResponse - a model defined in Swagger"""  # noqa: E501
        self._position_stake_size_percentage = None
        self._decision_polling_interval_in_seconds = None
        self.discriminator = None
        if position_stake_size_percentage is not None:
            self.position_stake_size_percentage = position_stake_size_percentage
        if decision_polling_interval_in_seconds is not None:
            self.decision_polling_interval_in_seconds = decision_polling_interval_in_seconds

    @property
    def position_stake_size_percentage(self):
        """Gets the position_stake_size_percentage of this AlgoParamsResponse.  # noqa: E501

        The percentage size of each stake to be used with this algorithm.  # noqa: E501

        :return: The position_stake_size_percentage of this AlgoParamsResponse.  # noqa: E501
        :rtype: float
        """
        return self._position_stake_size_percentage

    @position_stake_size_percentage.setter
    def position_stake_size_percentage(self, position_stake_size_percentage):
        """Sets the position_stake_size_percentage of this AlgoParamsResponse.

        The percentage size of each stake to be used with this algorithm.  # noqa: E501

        :param position_stake_size_percentage: The position_stake_size_percentage of this AlgoParamsResponse.  # noqa: E501
        :type: float
        """

        self._position_stake_size_percentage = position_stake_size_percentage

    @property
    def decision_polling_interval_in_seconds(self):
        """Gets the decision_polling_interval_in_seconds of this AlgoParamsResponse.  # noqa: E501

        The interval of time in seconds until the algorithm will provide the next decision.  # noqa: E501

        :return: The decision_polling_interval_in_seconds of this AlgoParamsResponse.  # noqa: E501
        :rtype: int
        """
        return self._decision_polling_interval_in_seconds

    @decision_polling_interval_in_seconds.setter
    def decision_polling_interval_in_seconds(self, decision_polling_interval_in_seconds):
        """Sets the decision_polling_interval_in_seconds of this AlgoParamsResponse.

        The interval of time in seconds until the algorithm will provide the next decision.  # noqa: E501

        :param decision_polling_interval_in_seconds: The decision_polling_interval_in_seconds of this AlgoParamsResponse.  # noqa: E501
        :type: int
        """

        self._decision_polling_interval_in_seconds = decision_polling_interval_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlgoParamsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlgoParamsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
